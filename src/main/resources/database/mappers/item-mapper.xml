<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.shop.ItemMapper">

    <insert id="createItem" parameterType="ItemDto">
        INSERT INTO shop.items
        (
            item_name
            , price
            , delivery_option
            , display_option
            , stock
            , manufacturer
            , description
            , img_src
        )
        VALUES
        (
            #{itemName}
            , #{price}
            , #{deliveryOption}
            , #{displayOption}
            , #{stock}
            , #{manufacturer}
            , #{description}
            , #{imgSrc}
        )
    </insert>

    <select id="findTotalCount" parameterType="PagingSearchAndSort" resultType = "integer">
        SELECT count(*)
        FROM shop.items
        <where>
            <if test="searchText !=null and searchText != '' ">
                <choose>
                    <when test="'itemName'.equals(searchType)">
                        item_name LIKE concat('%',#{searchText},'%');
                    </when>
                    <when test="'manufacturer'.equals(searchType)">
                        manufacturer LIKE concat('%',#{searchText},'%');
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <select id="findAllItems" parameterType="PagingSearchAndSort" resultType="ItemDto">
        SELECT
            R.RNUM
            , R.*
        FROM
        (
            SELECT
                T.*
                , @ROWNUM := @ROWNUM +1 AS RNUM
            FROM
                (
                    SELECT *
                    FROM shop.items
                    <if test="searchText !=null and searchText != ''">
                        <where>
                            <choose>
                                <when test="'itemName'.equals(searchType)">
                                    item_name LIKE concat('%',#{searchText},'%')
                                </when>
                                <when test="'manufacturer'.equals(searchType)">
                                    manufacturer LIKE concat('%',#{searchText},'%')
                                </when>
                            </choose>
                        </where>
                    </if>

                ) T
                , (SELECT @ROWNUM :=0 ) A
            ORDER BY
            <choose>
                <when test="orderBy eq 'RegisterDate'">T.item_sn DESC</when>
                <when test="orderBy eq 'AlphabetASC'">T.item_name</when>
                <when test="orderBy eq 'AlphabetDESC'">T.item_name DESC</when>
                <when test="orderBy eq 'PriceASC'">T.price</when>
                <when test="orderBy eq 'PriceDESC'">T.price DESC</when>
                <otherwise>T.item_sn DESC</otherwise>
            </choose>
        ) R
        WHERE
            R.RNUM BETWEEN ${((pageIndex-1) * pageCount) + 1} AND ${((pageIndex-1) * pageCount) + pageCount }
    </select>

    <select id="findAllDisplayedItems" parameterType="PagingSearchAndSort" resultType="ItemDto">
        SELECT
        R.RNUM
        , R.*
        FROM
        (
            SELECT
            T.*
            , @ROWNUM := @ROWNUM +1 AS RNUM
            FROM
            (
                SELECT *
                FROM shop.items
                WHERE
                    display_option = 'DISPLAY'
                <if test="searchText !=null and searchText != ''">
                AND
                    <choose>
                        <when test="'itemName'.equals(searchType)">
                            item_name LIKE concat('%',#{searchText},'%')
                        </when>
                        <when test="'manufacturer'.equals(searchType)">
                            manufacturer LIKE concat('%',#{searchText},'%')
                        </when>
                    </choose>
                </if>
            ) T
            , (SELECT @ROWNUM :=0 ) A
            ORDER BY
            <choose>
                <when test="orderBy eq 'RegisterDate'">T.item_sn DESC</when>
                <when test="orderBy eq 'AlphabetASC'">T.item_name</when>
                <when test="orderBy eq 'AlphabetDESC'">T.item_name DESC</when>
                <when test="orderBy eq 'PriceASC'">T.price</when>
                <when test="orderBy eq 'PriceDESC'">T.price DESC</when>
                <otherwise>T.item_sn DESC</otherwise>
            </choose>
        ) R
        WHERE
            R.RNUM BETWEEN ${((pageIndex-1) * pageCount) + 1} AND ${((pageIndex-1) * pageCount) + pageCount }
    </select>

    <select id="findItemByItemSn" parameterType="integer" resultType="ItemDto">
        SELECT
            *
        FROM
            shop.items
        WHERE
            item_sn = #{itemSn}
    </select>

    <update id="updateItem" parameterType="ItemDto">
        UPDATE
            shop.items
        SET
            item_name = #{itemName}
            , price = #{price}
            , delivery_option = #{deliveryOption}
            , display_option = #{displayOption}
            , stock = #{stock}
            , manufacturer = #{manufacturer}
            , description = #{description}
            , img_src = #{imgSrc}
        WHERE
            item_sn = #{itemSn}
    </update>

    <update id="updateStocks" parameterType="java.util.List">
       <foreach collection="list" item="ItemDto" open="" close="" separator=";" >
           UPDATE
                shop.items
           SET
                stock = #{ItemDto.stock}
           WHERE
                item_sn = #{ItemDto.itemSn}
       </foreach>
    </update>

    <delete id="deleteItem" parameterType="integer">
        DELETE FROM
            shop.items
        WHERE
            item_sn = #{id}
    </delete>

</mapper>