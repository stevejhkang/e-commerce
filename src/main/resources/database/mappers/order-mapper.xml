<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.shop.OrderMapper">
    <insert id="createOrder" parameterType="OrderDto" useGeneratedKeys="true" keyProperty="orderSn">
        insert into
            shop.orders
            (
                order_id
                , order_date
                , order_status
                , price
                , delivery_sn
                , user_sn
            )
        values
            (
                #{orderId}
                , now()
                , #{orderStatus}
                , #{price}
                , #{deliverySn}
                , #{userSn}
            )
    </insert>

    <select id="createSequenceNumber">
        select
            order_seq.NEXTVAL
        from
            shop.order_seq;
    </select>

    <select id="findTotalCount" parameterType="integer" resultType = "integer">
        select count(*)
        from shop.orders
        where user_sn=#{userSn}
    </select>

<!--    <select id="findAllOrdersByUserSn" parameterType="hashMap" resultType="OrderDto">-->
<!--        select-->
<!--            S.*, S.RNUM-->
<!--        from-->
<!--        (-->
<!--            select-->
<!--                R.* , @ROWNUM := @ROWNUM - 1 AS RNUM-->
<!--            from-->
<!--            (-->
<!--                select-->
<!--                    o.*-->
<!--                    , d.receiver_name-->
<!--                    , d.address-->
<!--                    , d.phone_number1-->

<!--                    , u.user_id-->
<!--                    , u.password-->
<!--                    , u.user_name-->
<!--                    , u.phone_number-->
<!--                    , u.user_type-->

<!--                from-->
<!--                    shop.orders o-->
<!--                    inner join-->
<!--                    shop.deliveries d-->
<!--                    on o.delivery_sn = d.delivery_sn-->
<!--                    inner join-->
<!--                    (select * from shop.users where user_sn=#{userSn}) u-->
<!--                    on o.user_sn = u.user_sn-->


<!--            ) R,-->
<!--            (-->
<!--                select-->
<!--                    @ROWNUM := (select count(*) from orders where user_sn=#{userSn})-->
<!--            ) A-->

<!--            order by order_sn desc-->
<!--        ) S-->
<!--        where-->
<!--            S.RNUM between ${((paging.pageIndex-1) * paging.pageCount) } and ${((paging.pageIndex-1) * paging.pageCount) + paging.pageCount+1 }-->
<!--    </select>-->
    <select id="findAllOrdersByUserSn" parameterType="hashMap" resultType="OrderDto">
            select
                R.*
            from
            (
                select
                    o.*
                    , d.receiver_name
                    , d.address
                    , d.phone_number1

                    , u.user_id
                    , u.password
                    , u.user_name
                    , u.phone_number
                    , u.user_type

                from
                    shop.orders o
                    inner join
                    shop.deliveries d
                    on o.delivery_sn = d.delivery_sn
                    inner join
                    (select * from shop.users where user_sn=#{userSn}) u
                    on o.user_sn = u.user_sn
            ) R
            order by order_sn desc
            limit #{paging.pageCount} offset ${((paging.pageIndex-1) * paging.pageCount)}
    </select>

</mapper>