<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.shop.OrderMapper">

    <insert id="createOrder" parameterType="OrderDto" useGeneratedKeys="true" keyProperty="orderSn">
        INSERT INTO
            shop.orders
            (
                order_id
                , order_date
                , order_status
                , price
                , delivery_sn
                , user_sn
            )
        VALUES
            (
                #{orderId}
                , now()
                , #{orderStatus}
                , #{price}
                , #{deliverySn}
                , #{userSn}
            )
    </insert>

    <select id="createSequenceNumber">
        SELECT
            order_seq.NEXTVAL
        FROM
            shop.order_seq;
    </select>

    <select id="findTotalCount" parameterType="integer" resultType = "integer">
        SELECT
            count(*)
        FROM
            shop.orders
        WHERE
            user_sn=#{userSn}
    </select>

    <select id="findAllOrdersByUserSn" parameterType="hashMap" resultType="OrderDto">
            SELECT
                R.*
            FROM
            (
                SELECT
                    o.*
                    , d.receiver_name
                    , d.address
                    , d.phone_number1

                    , u.user_id
                    , u.password
                    , u.name
                    , u.phone_number
                    , u.user_type

                FROM
                    shop.orders o
                        INNER JOIN
                    shop.deliveries d
                        ON o.delivery_sn = d.delivery_sn

                        INNER JOIN
                    (
                        SELECT
                            *
                        FROM
                            shop.users
                        WHERE
                            user_sn=#{userSn}
                    ) u
                        ON o.user_sn = u.user_sn
            ) R
            ORDER BY order_sn DESC
            limit #{paging.pageCount} OFFSET ${((paging.pageIndex-1) * paging.pageCount)}
    </select>

    <select id="findOrderByOrderSn" parameterType="integer" resultType="OrderDto">
        SELECT
            *
        FROM
            shop.orders
        WHERE
            order_sn=#{orderSn}
    </select>

    <update id = "confirmOrder" parameterType="integer">
        UPDATE shop.orders
        SET
            order_status = 'ORDER_CONFIRMED'
        WHERE
            order_sn=#{orderSn}
    </update>

</mapper>